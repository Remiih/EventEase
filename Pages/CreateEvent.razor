@page "/events/create"
@using EventEase.Models

<h1>Create Event</h1>

<EditForm Model="@eventModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="Title">Title</label>
        <InputText id="Title" class="form-control" @bind-Value="eventModel.Title" />
        <ValidationMessage For="@(() => eventModel.Title)" />
    </div>

    <div class="form-group">
        <label for="Description">Description</label>
        <InputTextArea id="Description" class="form-control" @bind-Value="eventModel.Description" />
        <ValidationMessage For="@(() => eventModel.Description)" />
    </div>

    <div class="form-group">
        <label for="Location">Location</label>
        <InputText id="Location" class="form-control" @bind-Value="eventModel.Location" />
        <ValidationMessage For="@(() => eventModel.Location)" />
    </div>

    <div class="form-group">
        <label for="Date">Date</label>
        <InputDate id="Date" class="form-control" @bind-Value="eventModel.Date" />
        <ValidationMessage For="@(() => eventModel.Date)" />
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@code {
    private Event eventModel = new Event();


    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private async Task HandleValidSubmit()
    {
        // Get existing events from local storage
        var existingEventsJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "events");
        List<Event> existingEvents = new List<Event>();

        if (!string.IsNullOrEmpty(existingEventsJson))
        {
            existingEvents = System.Text.Json.JsonSerializer.Deserialize<List<Event>>(existingEventsJson);
        }

        // Add the new event
        eventModel.Id = existingEvents.Count > 0 ? existingEvents.Max(e => e.Id) + 1 : 1; // Generate a unique ID
        existingEvents.Add(eventModel);

        // Serialize and save back to local storage
        var updatedEventsJson = System.Text.Json.JsonSerializer.Serialize(existingEvents);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "events", updatedEventsJson);

        // Clear the form
        eventModel = new Event();

        // Optionally, navigate back to the events list
        NavigationManager.NavigateTo("/events");
    }
}